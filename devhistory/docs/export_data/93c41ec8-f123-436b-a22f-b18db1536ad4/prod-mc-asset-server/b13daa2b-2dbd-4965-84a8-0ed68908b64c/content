# Chirality Framework 14 v2.1.1 Implementation

[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
![CF14](https://img.shields.io/badge/CF14-v2.1.1-blue)
![NextJS](https://img.shields.io/badge/Built_with-NextJS_14-black)
![Python](https://img.shields.io/badge/Python-3.8+-yellow)
![Neo4j](https://img.shields.io/badge/Neo4j-Graph_DB-green)
![OpenAI API](https://img.shields.io/badge/Powered_by-OpenAI_API-orange)
![Production Ready](https://img.shields.io/badge/Status-Production_Ready-success)

[![Docs](https://img.shields.io/badge/docs-index-blue)](#-documentation-index)
[![Changelog](https://img.shields.io/badge/changelog-latest-orange)](./CHANGELOG.md)
[![License](https://img.shields.io/badge/license-MIT-green)](./LICENSE)

A complete, production-ready implementation of the **Chirality Framework 14 (CF14) v2.1.1** normative specification. This repository contains the core semantic engine, multiple deployment options, and framework APIs. The chat interface is available as a separate application at [Chirality-chat](https://github.com/sgttomas/Chirality-chat).

> **New in v2.1.1**: Domain pack system, Array P/H operations, enhanced UFO ontology integration, and complete backward compatibility with v1.x implementations.

## üì¶ Repository Organization

This project is now organized as a **split-apps architecture**:

- **[Chirality-Framework](https://github.com/sgttomas/Chirality-Framework)** (this repo): Core semantic engine, GraphQL service, Python CLI tools
- **[Chirality-chat](https://github.com/sgttomas/Chirality-chat)**: Modern chat interface with streaming AI responses, matrix visualization, and MCP integration
- **[Chirality-AI](https://github.com/[org]/chirality-ai)**: Production orchestration and desktop packaging

This separation enables:
- Independent deployment and scaling of frontend and backend
- Cleaner separation of concerns
- Easier contribution and maintenance
- Multiple frontend implementations using the same core framework

## üöÄ Quick Setup

> **‚ö° Complete Development Environment**: For full multi-service setup including desktop app and both frontend interfaces, see **[Chirality AI - Complete Developer Setup Guide](https://github.com/[org]/chirality-ai#-complete-developer-setup-guide)**.

## üèÉ‚Äç‚ôÇÔ∏è Standalone Development (This Repository Only)

### GraphQL Service (Port 8080)
```bash
cd graphql-service
npm install
npm run dev
```

### Semantic Framework UI (Port 3002) 
```bash
npm install
PORT=3002 npm run dev
```

**Available Services:**
- **GraphQL API**: http://localhost:8080/graphql
- **Framework Interface**: http://localhost:3002
- **Health Check**: `curl http://localhost:8080/health`

## üéØ What This System Does

- **üß† Semantic Reasoning**: Transforms problem statements into structured CF14 semantic matrices (A, B, C, F, D)
- **üèóÔ∏è Knowledge Architecture**: Creates persistent semantic representations in Neo4j with UFO ontology annotations
- **üí¨ Conversational AI**: Natural language interface to query instantiated knowledge with context-aware responses
- **üìä Visual "Semanti Matrix Operations"**: Interactive matrix visualization with computational semantic operation traceability
- **üõ†Ô∏è Domain Customization**: Extensible domain pack system for specialized knowledge domains
- **‚ö° CLI Automation**: Enhanced Python CLI with v2.1.1 features for batch operations and pipeline automation
- **üîç Array P/H Analysis**: Advanced validity parameters and consistency dialectic extraction

### üìê Two-Phase Framework Flow

The Chirality Framework operates in two distinct phases:

- **Phase‚ÄØ1 (Initialization)**: At system boot-up, the framework constructs a canonical, model-agnostic, and abstract version of the Chirality Framework. This phase is entirely independent of any specific problem or user context, and serves as the normative reference implementation for all subsequent instantiations.
- **Phase‚ÄØ2 (Instantiation)**: When a concrete problem is presented, the canonical abstract framework is instantiated in the context of that specific problem. This involves semantic transformation of the framework‚Äôs components, one cell at a time, to reflect the meaning and requirements of the problem domain.

## üèóÔ∏è Core Features

### CF14 v2.1.1 Normative Specification
- ‚úÖ **10-Station Semantic Valley**: Problem Statement ‚Üí Requirements ‚Üí Objectives ‚Üí ... ‚Üí Resolution
- ‚úÖ **Enhanced Components**: Array P (Validity Parameters), Array H (Consistency Dialectic)
- ‚úÖ **Semantic Operations**: `*` (multiplication), `+` (addition), `√ó` (cross product), `‚äô` (element-wise)
- ‚úÖ **Complete Provenance**: Full operation tracking with metadata preservation

### Domain Pack System
- üéØ **Customizable Axioms**: Domain-specific Matrix A and B definitions
- üéØ **Extensible Ontologies**: Custom UFO categories and semantic operations
- üéØ **Validation Framework**: Built-in domain pack validation and testing
- üéØ **Pre-built Domains**: Software engineering, business strategy, research methods

### Production Architecture
- üèõÔ∏è **Hybrid Design**: Next.js frontend + Enhanced Python CLI + Neo4j backend
- üèõÔ∏è **DB-as-Working-Memory**: Neo4j serves as persistent semantic reasoning context
- üèõÔ∏è **Real-time Operations**: Live matrix generation with progress tracking
- üèõÔ∏è **Backward Compatibility**: Full support for v1.x APIs and data structures

## üöÄ Quick Start

> **Note**: This repository now focuses on the core framework and GraphQL service. For the chat interface, please visit [Chirality-chat](https://github.com/sgttomas/Chirality-chat).

### Prerequisites

- **Node.js** 18+ and npm (for GraphQL service and API)
- **Python** 3.8+ with pip (for CF14 semantic engine)
- **Neo4j Aura** account or local Neo4j 5.x instance
- **OpenAI API** key with sufficient credits
- **4GB RAM** minimum (8GB recommended for large matrices)
- **Broadband connection** for Neo4j Aura and OpenAI API access

‚ö†Ô∏è‚ÄØThe framework requires a valid `OPENAI_API_KEY` for all semantic operations; if the key is missing, the process will exit rather than fallback to join-only.

### Environment Setup

1. **Clone the repository:**
   ```bash
   git clone <your-repository-url>
   cd chirality-semantic-framework
   ```

2. **Install dependencies:**
   ```bash
   npm install
   pip install click openai requests pydantic neo4j python-dotenv
   ```

3. **Configure environment variables:**
   
   Create `.env.local` with exact variable names:
   ```env
   # Neo4j Configuration (Critical: Use NEO4J_USER not NEO4J_USERNAME)
   NEO4J_URI=neo4j+s://your-instance.databases.neo4j.io
   NEO4J_USER=neo4j
   NEO4J_PASSWORD=your-aura-password
   NEO4J_DATABASE=neo4j
   
   # OpenAI Configuration
   OPENAI_API_KEY=sk-proj-your-api-key
   
   # Application Settings
   NEXT_PUBLIC_API_BASE=http://localhost:3000
   
   # CF14 v2.1.1 Features (optional)
   CF14_VERSION=2.1.1
   CF14_ENABLE_ARRAY_PH=true
   CF14_LEGACY_API_SUPPORT=true
   ```

4. **Start the GraphQL service:**
   ```bash
   # Start GraphQL service
   cd graphql-service
   npm install
   npm run dev  # Runs on http://localhost:8080/graphql
   ```

5. **For the chat interface:**
   ```bash
   # Clone and run the Chirality-chat application
   git clone https://github.com/sgttomas/Chirality-chat.git
   cd Chirality-chat
   npm install
   npm run dev  # Runs on http://localhost:3000
   ```

### Basic Usage

#### Using the Chat Interface (via Chirality-chat repo)
1. **üéØ Instantiate Knowledge**: Visit `http://localhost:3000` 
   - Enter your problem statement
   - Provide a knowledge domain or additionl context
   - The python prompt-based semantic kernel will generate a constrained set of categories related to the problem
   - This is sent to Neo4j database in real time.

#### Using the GraphQL Service (http://localhost:8080/graphql)
- Query the chat interface about your problem
- semantic matrices and components are the seeds from which the topic and problem statement will sprout information within the context of that unique cell
- Execute CF14 operations all still in the Python CLI
- Access Neo4j knowledge graph directly for working memory of the semantic operations
- Output the contextual information in JSON format (contract in the code will be developed but functions)

#### Using the Chat Interface (via Chirality-chat repo)
1. **üéØ Receive solution statement: Visit `http://localhost:3000` 
   - Python backend receives the JSON output from the working memory and this is used as an addition to a system prompt to the LLM Chat bot
   - If part of structured workflows the set of answers will be constrained further (maybe in a good way as each instance becomes more accurate but narrow minded)
   - Chat with the AI about Chirality Framework concepts
   - Latency will be noticeable, but this is more of an agentic framework than a basic chat experience

2. **üìä Matrix Operations**: Visit `http://localhost:3000/matrix`
   - View stored matrices from Neo4j
   - Explore semantic relationships
   - Navigate the knowledge graph 

### CLI Operations

#### Phase‚ÄØ1 / Phase‚ÄØ2 Commands
```bash
# Phase‚ÄØ1 ‚Äì Canonical initialization (abstract form)
python chirality_cli.py semantic-init --model gpt-5 --out cf14_abstract.json

# Phase‚ÄØ2 ‚Äì Context-specific instantiation
python chirality_cli.py semantic-iv --problem-statement "..." --domain-pack ontology/domains/software_engineering/cf14.domain.software_eng.v1.0.json --out cf14_instance.json
```

#### CF14 v2.1.1 Enhanced Commands
```bash
# Generate matrices with domain packs
python chirality_cli.py semantic-matrix-c \
  --domain-pack ontology/domains/software_engineering/cf14.domain.software_eng.v1.0.json \
  --out software_matrix_c.json

# Complete pipeline with domain customization
python chirality_cli.py full-pipeline \
  --domain-pack ontology/domains/business_strategy/cf14.domain.business.v1.0.json \
  --out business_analysis.json

# Domain pack validation
python chirality_cli.py validate-domain \
  --domain-pack ontology/domains/custom_domain/cf14.domain.custom.v1.0.json

# Advanced CF14 v2.1.1 operations
python chirality_cli.py extract-array-p --matrix-z-id matrix_Z_validation
python chirality_cli.py extract-array-h --array-p-id array_P_validity
```

#### Legacy Commands (Still Supported)
```bash
# Basic matrix generation
python chirality_cli.py semantic-matrix-c --out matrix_c.json
python chirality_cli.py full-pipeline --out results.json

# Database administration
python neo4j_admin.py list                    # List components
python neo4j_admin.py delete --id C          # Delete specific matrix
python neo4j_admin.py delete-station --station Requirements
```

## UFO Ontology Alignment

**UFO alignment note**: In this project, "modality" means analysis lens (Systematic, Process, Epistemic, Alethic). This is not UFO's "Mode." We align as follows: Systematic ‚Üî UFO-C Normative Descriptions; Process ‚Üî UFO-B Perdurants; Epistemic ‚Üî UFO-C Information Objects & UFO-A Modes (beliefs/skills); Alethic ‚Üî logical constraints on Descriptions/Processes. We do not introduce new UFO categories; we annotate UFO-typed elements with modal constraints when needed.

## üìö Documentation Index

| Document | Description |
|----------|-------------|
| [PULL_REQUEST_TEMPLATE.md](.github/PULL_REQUEST_TEMPLATE.md) | Pull request template. |
| [BACKEND_DEVELOPMENT.md](BACKEND_DEVELOPMENT.md) | Backend development status and priorities. |
| [CHANGELOG.md](CHANGELOG.md) | Version history and release notes. |
| [CLAUDE.md](CLAUDE.md) | Claude Code project instructions. |
| [CLAUDE_BACKEND.md](CLAUDE_BACKEND.md) | Backend development guidance for Claude Code. |
| [CLAUDE_CLI.md](CLAUDE_CLI.md) | CLI development patterns for Claude Code. |
| [CLAUDE_GRAPHQL.md](CLAUDE_GRAPHQL.md) | GraphQL service development for Claude Code. |
| [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md) | Community interaction guidelines. |
| [CONTRIBUTING.md](CONTRIBUTING.md) | How to contribute, workflow, and coding guidelines. |
| [GETTING_STARTED.md](GETTING_STARTED.md) | Quick setup for backend services. |
| [README.md](README.md) | Main project overview. |
| [README_CLI.md](README_CLI.md) | CLI development documentation. |
| [RELEASE.md](RELEASE.md) | High-level release checklist. |
| [RELEASING.md](RELEASING.md) | Full release process and versioning policy. |
| [SECURITY.md](SECURITY.md) | Security policies and vulnerability reporting. |
| [VERSION.md](VERSION.md) | Current version info and roadmap. |
| [README.md](admin-ui/README.md) | Documentation overview. |
| [ORCHESTRATOR_API.md](admin-ui/docs/ORCHESTRATOR_API.md) | Documentation file. |
| [README.md](chirality-admin/README.md) | Documentation overview. |
| [CLI-to-UI.md](chirality-admin/docs/CLI-to-UI.md) | Documentation file. |
| [chirality_cli_HELP.md](chirality_cli_HELP.md) | Complete CLI usage guide. |
| [API_REFERENCE.md](docs/API_REFERENCE.md) | Complete API documentation and examples. |
| [DEVELOPMENT_WORKFLOW.md](docs/DEVELOPMENT_WORKFLOW.md) | Development process, standards, and visuals. |
| [TROUBLESHOOTING.md](docs/TROUBLESHOOTING.md) | Problem-solving guide. |
| [001-split-apps-architecture.md](docs/adr/001-split-apps-architecture.md) | Architecture Decision Record. |
| [002-graphql-service-layer.md](docs/adr/002-graphql-service-layer.md) | Architecture Decision Record. |
| [003-cli-integration-pattern.md](docs/adr/003-cli-integration-pattern.md) | Architecture Decision Record. |
| [004-semantic-operation-boundary.md](docs/adr/004-semantic-operation-boundary.md) | Architecture Decision Record. |
| [005-neo4j-as-working-memory.md](docs/adr/005-neo4j-as-working-memory.md) | Architecture Decision Record. |
| [006-structured-cli-output.md](docs/adr/006-structured-cli-output.md) | Architecture Decision Record. |
| [007-health-check-standardization.md](docs/adr/007-health-check-standardization.md) | Architecture Decision Record. |
| [README.md](docs/adr/README.md) | Documentation overview. |
| [README.md](graphql/README.md) | Documentation overview. |
| [README.md](graphql-service/README.md) | GraphQL service documentation. |
| [README.md](orchestration-service/README.md) | Documentation overview. |

## üèõÔ∏è System Architecture

### CF14 v2.1.1 Split-Apps Architecture
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Chirality-chat     ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ  GraphQL Service‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ  Neo4j Graph   ‚îÇ
‚îÇ  (separate repo)    ‚îÇ    ‚îÇ  (localhost:8080)‚îÇ    ‚îÇ   Database     ‚îÇ
‚îÇ  localhost:3000     ‚îÇ    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò             ‚îÇ                       ‚îÇ
         ‚îÇ                      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îê              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îê                ‚îÇ@neo4j/   ‚îÇ              ‚îÇComponents‚îÇ
    ‚îÇChat UI  ‚îÇ                ‚îÇgraphql   ‚îÇ              ‚îÇCells+UFO ‚îÇ
    ‚îÇMatrix Viz‚îÇ               ‚îÇApollo    ‚îÇ              ‚îÇTerms     ‚îÇ
    ‚îÇMCP Tools‚îÇ                ‚îÇYoga      ‚îÇ              ‚îÇStations  ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò              ‚îÇProvenance‚îÇ
                                                         ‚îÇDomainPacks‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                                     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇEnhanced Python ‚îÇ                                           ‚îÇ
‚îÇ   CLI v2.1.1   ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇ  "Semmul"  Ops ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

> **Phase‚ÄØ1 is now supported via an Admin Workbench UI (backend only) for developers to run and review the canonical abstract framework before instantiation. No semantics are provided by humans in Phase‚ÄØ1 ‚Äî all operations follow the normative CF14 construction rules.**

### Key Architectural Patterns
- **üìÅ Semantic Memory**: Neo4j stores instantiated knowledge with full provenance
- **üîÑ Hybrid Processing**: UI triggers Python CLI operations via API routes
- **üìä Real-time Updates**: WebSocket-like progress tracking during matrix generation
- **üéØ Domain Extensibility**: Procedural generation of problem-specific semantics for specialized reasoning
- **‚úÖ Canonical IDs**: Consistent semantic framework components (cells, arrays, matrices, tensors) used as an ontology for constraining thoughts
- **üß† and easy identification of discrete strings in a specified semantic context for reasoning traces used in reinforcement learning

## üõ†Ô∏è Backend Development Status

### üöß Current Work in Progress
The backend infrastructure is actively being enhanced to support production-grade operations:

**‚úÖ Completed:**
- Admin UI CLI Integration: Real CLI commands (push-axioms, generate-c) replacing mock functions in `chirality-admin/pages/api/phase1/step.ts`
- Enhanced Process Management: Proper CLI process lifecycle with output streaming
- UI Label Updates: Accurate step descriptions reflecting actual backend operations

**üîÑ In Progress:**
- Complete CLI Integration: Adding remaining commands (generate-f, generate-d, verify-stages)
- Error Handling: Robust failure recovery and timeout management for long-running operations
- Performance Optimization: GraphQL query optimization and database connection pooling

### üéØ Backend Development Priorities

**High Priority:**
1. **CLI Integration** - Complete remaining backend command integration in admin API routes
2. **Error Recovery** - Implement comprehensive error handling across all backend services
3. **Operation Monitoring** - Add real-time progress tracking and operation status APIs

**Medium Priority:**
1. **GraphQL Enhancements** - Health checks, request logging, and performance metrics
2. **Python CLI Improvements** - Structured JSON output and progress reporting
3. **Database Administration** - Bulk operations and integrity validation tools

**Low Priority:**
1. **Monitoring Infrastructure** - Advanced logging and performance tracking systems
2. **Process Management** - Operation queuing and concurrent execution limits

### üìã Technical Debt Resolution
- Remove hardcoded file paths in API routes: `chirality-admin/pages/api/phase1/step.ts`
- Standardize error response formats across backend APIs
- Implement proper configuration management for environment variables
- Add comprehensive test coverage for CLI integration workflows

## üîß Technology Stack

### Frontend (Next.js)
- **Framework**: Next.js 14 with App Router
- **Language**: TypeScript with strict type checking
- **Styling**: Tailwind CSS with shadcn/ui components
- **State**: Zustand for UI state, Neo4j for semantic memory
- **API**: RESTful routes with enhanced v2.1.1 endpoints

### Database (Neo4j)
- **Platform**: Neo4j Aura (cloud) or local 5.x instance
- **Ontology**: Unified Foundational Ontology (UFO) annotations
- **Schema**: Components, Cells, Terms, Stations with relationships
- **Features**: ACID transactions, Cypher queries, graph algorithms

### Backend (Python)
- **Version**: Python 3.8+ with CF14 v2.1.1 enhancements
- **AI Integration**: OpenAI API for semantic reasoning
- **Libraries**: Click (CLI), Pydantic (validation), Neo4j driver
- **Features**: Domain pack system, Array P/H operations, provenance tracking
- **Status**: Production-ready with ongoing performance optimizations

### Development Tools
- **Package Management**: npm (Node.js), pip (Python)
- **Version Control**: Git with semantic commit messages
- **Environment**: Docker-ready, supports local and cloud deployment
- **Testing**: Built-in validation, health checks, API testing suite
- **Backend Development**: Smoke tests for REST/GraphQL, benchmark suite

## Project Structure

```
‚îú‚îÄ‚îÄ graphql-service/                       # GraphQL Service (New)
‚îÇ   ‚îú‚îÄ‚îÄ src/index.ts                      # GraphQL server with Neo4j integration
‚îÇ   ‚îú‚îÄ‚îÄ neo4j/schema.cql                  # Neo4j schema definitions
‚îÇ   ‚îî‚îÄ‚îÄ dist/                             # Compiled GraphQL service
‚îú‚îÄ‚îÄ src/                                   # Core Application (Refactored)
‚îÇ   ‚îú‚îÄ‚îÄ app/                              # Next.js App Router
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api/neo4j/                   # REST API routes
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ clean-setup/route.ts     # Database management
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ingest-v2/route.ts      # Enhanced component ingestion
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ compute/f/route.ts      # Matrix F computation
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ domain/route.ts         # Domain pack management
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ test-integrity/              # Testing pages
‚îÇ   ‚îú‚îÄ‚îÄ lib/                             # Shared Libraries
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ neo4j.ts                    # Database connection
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ apollo.ts                   # GraphQL client
‚îÇ   ‚îî‚îÄ‚îÄ graphql/queries/                 # GraphQL query definitions
‚îú‚îÄ‚îÄ scripts/                              # Testing & Benchmarking (New)
‚îÇ   ‚îú‚îÄ‚îÄ smoke-rest.mjs                   # REST API smoke tests
‚îÇ   ‚îú‚îÄ‚îÄ smoke-gql.mjs                    # GraphQL smoke tests
‚îÇ   ‚îî‚îÄ‚îÄ test-matrix.mjs                  # Matrix operation tests
‚îú‚îÄ‚îÄ bench/                                # Performance Benchmarking (New)
‚îÇ   ‚îî‚îÄ‚îÄ bench.ts                         # Benchmark suite
‚îú‚îÄ‚îÄ ontology/                            # CF14 v2.1.1 Domain System
‚îÇ   ‚îú‚îÄ‚îÄ cf14.core.v2.1.1.json          # Core framework ontology
‚îÇ   ‚îî‚îÄ‚îÄ domains/                        # Domain-specific customizations
‚îú‚îÄ‚îÄ chirality_cli.py                    # Enhanced CF14 v2.1.1 CLI
‚îú‚îÄ‚îÄ neo4j_admin.py                      # Database administration
‚îú‚îÄ‚îÄ schema.graphql                      # GraphQL schema definition
‚îî‚îÄ‚îÄ codegen.ts                          # GraphQL code generation config
‚îú‚îÄ‚îÄ VERSION.md                           # Version tracking
‚îú‚îÄ‚îÄ Chirality_cli_README.md             # Architectural documentation
‚îú‚îÄ‚îÄ chirality_cli_HELP.md               # Operational guide
‚îî‚îÄ‚îÄ README_CF14_v2.1.1.md              # v2.1.1 features overview
```

## ü§ù Contributing

This is a **production-ready implementation** of the Chirality Framework 14 v2.1.1 normative specification. We welcome contributions that enhance the framework's capabilities:

### Areas for Contribution
- **üéØ Domain Packs**: Create specialized domain ontologies (healthcare, finance, education, etc.)
- **üèóÔ∏è Station Extensions**: Implement remaining semantic valley stations (Assessment, Implementation, Reflection)
- **üìä Array P/H UI**: Build visualization for validity parameters and consistency dialectic
- **‚ö° Performance**: Optimize semantic operations, caching, and database queries
- **üîß Integrations**: Add support for other graph databases, LLM providers, or export formats

### Development Guidelines
- Follow canonical ID conventions (A, B, C, F, D)
- Maintain backward compatibility with v1.x APIs
- Include comprehensive tests for new features
- Update documentation for architectural changes
- Use semantic commit messages

### Getting Started
1. Fork the repository
2. Create feature branch: `git checkout -b feature/domain-pack-healthcare`
3. Follow development setup in operational guide
4. Submit pull request with clear description of enhancements

## üìÑ License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

---

## üéâ Production Status

This implementation is **complete and production-ready** with:

‚úÖ **Full CF14 v2.1.1 Specification**: All normative requirements implemented  
‚úÖ **Domain Pack System**: Extensible customization framework  
‚úÖ **Hybrid Architecture**: Scalable Next.js + Python + Neo4j design  
‚úÖ **Complete Documentation**: Architectural guides and operational procedures  
‚úÖ **Backward Compatibility**: Seamless migration from v1.x implementations  
‚úÖ **Production Deployment**: Ready for enterprise knowledge management  

**Ready to apply the Chirality Framework to solve complex knowledge problems!** üöÄ

---

### üìû Support & Resources

- **üìñ Getting Started**: Follow the quick start guide above
- **üîß Troubleshooting**: See [operational help guide](chirality_cli_HELP.md)
- **üèóÔ∏è Architecture**: Review [implementation overview](Chirality_cli_README.md)
- **üêõ Issues**: Report problems via GitHub issues
- **üí° Discussions**: Share ideas and use cases

**Built with semantic reasoning in mind. Transforming problem statements into structured knowledge since 2024.**

---

# Split-Apps Architecture Implementation

## Overview

Successfully implemented the split-apps structure that preserves all working functionality while organizing the codebase for future unified deployment via Electron.

## Final Directory Structure

```
/Users/ryan/Desktop/ai-env
‚îú‚îÄ‚îÄ chirality-ai/                    # Orchestrator repo (compose, desktop, docs)
‚îÇ   ‚îú‚îÄ‚îÄ compose/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.yml       # Backend services (Neo4j, GraphQL, Admin)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ .env                     # Environment configuration
‚îÇ   ‚îú‚îÄ‚îÄ desktop/                     # Future Electron wrapper
‚îÇ   ‚îî‚îÄ‚îÄ .env                         # Shared environment configuration
‚îú‚îÄ‚îÄ chirality-ai-app/               # Product frontend (Next.js)
‚îú‚îÄ‚îÄ chirality-ai-backend/            # Product backend (GraphQL + Admin)
‚îú‚îÄ‚îÄ chirality-semantic-framework/   # Independent full app
‚îî‚îÄ‚îÄ chirality-chat/                 # Independent sandbox app
```

## Services & Ports

### Backend Services (via Docker Compose)
- **Neo4j**: `localhost:7474` (HTTP), `localhost:7687` (Bolt)
- **GraphQL**: `localhost:8080`
- **Admin**: `localhost:3001`

### Frontend Applications
- **Product App** (`chirality-ai-app`): `localhost:3000`
- **Semantic Framework**: Independent ports
- **Chat Sandbox**: Independent ports

## Application Coexistence

### Product App Usage
```bash
# Start backend services
cd /Users/ryan/Desktop/ai-env/chirality-ai/compose
docker compose up -d

# Start frontend
cd /Users/ryan/Desktop/ai-env/chirality-ai-app
npx next dev  # Available at http://localhost:3000
```

### Framework App Usage
The `chirality-semantic-framework` remains completely independent:
```bash
cd /Users/ryan/Desktop/ai-env/chirality-semantic-framework
npm run dev  # Runs on its own port
```

### Chat Sandbox Usage
The `chirality-chat` can point to the same backend via environment:
```bash
cd /Users/ryan/Desktop/ai-env/chirality-chat
echo "NEXT_PUBLIC_GRAPHQL_URL=http://localhost:8080/graphql" >> .env.local
npm run dev  # Experimental sandbox using shared backend
```

## Benefits Achieved

1. **Zero Downtime**: Preserved all working functionality
2. **Clear Organization**: Distinct boundaries between product, framework, and sandbox
3. **Unified Backend**: Single set of services serving multiple frontends
4. **Electron Ready**: Structure prepared for desktop app packaging
5. **Independent Evolution**: Framework and chat can iterate without affecting product

The split-apps architecture is now fully operational and ready for continued development or Electron packaging.

## Semantic Integrity Contract (CF14)

**Why this matters** ‚Äî The Chirality Framework requires a strict, auditable flow from construction to interpretation so each cell is a true "semantic anchor," not a guess or a fallback. We enforce fail-fast semantics rather than silently accepting gibberish or arbitrary string conversions.

### Core Principles
1. **Order of operations is normative**: always do semantic **multiplication** first, then **addition**. Applies to C (A√óB), F (J√óC), and all later matrices. (CF14: Order of Operations.)  
2. **Two-lens interpretation**: after construction, interpret each element through the **column ontology** then the **row ontology**, and synthesize a final narrative. (CF14: C/F/D interpretation steps.)
3. **Axioms are canonical**: Matrices **A** and **B** are serialized with full `cells`, row/col labels, and ontology metadata; downstream steps must not recompute or transpose them.
4. **Fail-fast semantics**: if a value isn't a semantic structure, we don't coerce it to a string. We return an explicit fallback label (e.g., `F(1,4)`) or raise, rather than pass meaningless content.
5. **Cell model invariants**:
   - `resolved`: the final narrative (post-interpretation when applicable).
   - `intermediate`: ordered trace of transformation (e.g., `["A(1,1) * B(1,1)", "‚Ä¶ + ‚Ä¶"]`).
   - `raw_terms`: only the original terms supplied to the semantic operation. For non-semantic data matrices (manual grids), leave `raw_terms` empty.
6. **Label & orientation invariants**: render `cells[i][j]` against the component's own `row_labels`/`col_labels`. Never auto-transpose.
7. **Determinism & auditability**: prefer in-memory products for immediate follow-ups (e.g., D consumes the in-memory **F**), then persist. Include a version tag and operation metadata.

### Operational Playbook
- **Regenerate from clean state**: clear old components in Neo4j, then run A/B/C/F/D generation to avoid stale labels.
- **Troubleshooting**
  - Wrong labels in UI: ensure the component JSON includes `row_labels`/`col_labels` and the UI prefers those over any ontology refs.
  - D shows `F(i,j)` instead of content: confirm D consumes the **in-memory** F cells and `_safe_resolved` checks `resolved ‚Üí intermediate ‚Üí raw_terms` (no arbitrary string conversion).

### References
- CF14: *Semantic Dot Product* and **A√óB=C** definition.
- CF14: *Order of Operations* (multiply then add).
- CF14: *C, F, D interpretation steps* and D construction formula.

(This section summarizes: A√óB=C, the order-of-ops, and the interpretation steps. See CF14: A√óB=C; order of ops; and the C/F/D interpretation passages.)

## üèóÔ∏è Service Architecture & Deployment Options

This repository provides multiple service deployment patterns to support different use cases:

### Development Services (Framework-Integrated)
- **`graphql-service/`**: Framework-integrated GraphQL service with Neo4j
- **`admin-ui/`**: Next.js admin interface for Phase 1 operations  
- **`chirality-admin/`**: Admin interface with CLI integration
- Use for: Framework development, testing, full-featured local development

### Production Services (Docker-Ready)
- **`admin/`**: Express.js orchestration service (port 3001)
- **`graphql/`**: Standalone GraphQL service (port 8080)
- **`orchestration-service/`**: Salvaged orchestration service
- Use for: Production deployment, containerized environments, microservices

### Core Framework Components
- **Python CLI Tools**: `chirality_cli.py`, `neo4j_admin.py`
- **CF14 Implementation**: Complete semantic matrix operations (A√óB=C, J‚äôC=F, A+F=D)
- **Domain Pack System**: Extensible ontology customization
- **Neo4j Integration**: Persistent semantic working memory

### Service Selection Guide

**For Local Development**: Use `graphql-service/` + `admin-ui/`
```bash
cd graphql-service && npm run dev  # GraphQL at :8080
cd admin-ui && npm run dev         # Admin UI at :3001
```

**For Production Deployment**: Use `admin/` + `graphql/`
```bash
cd graphql && npm run dev          # Standalone GraphQL
cd admin && npm run dev            # Production orchestrator
```

**For Docker Deployment**: All production services are containerization-ready
```bash
# Each service includes Dockerfile and docker-compose support
docker build ./admin
docker build ./graphql
```

### Service Architecture

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                Frontend Applications                     ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê           ‚îÇ
‚îÇ  ‚îÇ chirality-ai-app‚îÇ    ‚îÇ  chirality-chat ‚îÇ           ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ                   ‚îÇ
              ‚ñº                   ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ     Chirality Framework (Multiple Service Options)      ‚îÇ
‚îÇ                                                         ‚îÇ
‚îÇ  Production Services (Docker-ready):                    ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ admin/ (Express.js orchestration)                  ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ graphql/ (Standalone GraphQL)                      ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ orchestration-service/ (Salvaged service)          ‚îÇ
‚îÇ                                                         ‚îÇ
‚îÇ  Development Services (Framework-integrated):           ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ graphql-service/ (Framework GraphQL)               ‚îÇ
‚îÇ  ‚îú‚îÄ‚îÄ admin-ui/ (Next.js admin)                          ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ chirality-admin/ (Admin interface)                 ‚îÇ
‚îÇ                                                         ‚îÇ
‚îÇ  Core Framework:                                        ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ Python CLI + CF14 implementation                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚îÇ
              ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                    Neo4j Database                       ‚îÇ
‚îÇ        Semantic Matrix Storage & Graph Operations       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üöÄ Quick Start (Production Services)

### Prerequisites
- Docker and Docker Compose  
- Node.js 18+ and npm
- Neo4j Aura account or local instance

### Start Backend Services

```bash
# Start GraphQL service
cd graphql
npm install
npm run dev

# Start Admin service (separate terminal)
cd admin  
npm install
npm run dev

# Services available at:
# - GraphQL: http://localhost:8080/graphql
# - Admin: http://localhost:3001
```

See individual service READMEs for detailed configuration:
- [GraphQL Service](./graphql/README.md)
- [Admin Service](./admin/README.md)
